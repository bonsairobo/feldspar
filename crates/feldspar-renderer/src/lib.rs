//! A mesh-based renderer for voxel maps from the `feldspar-map` crate.
//!
//! # Surface Nets Mesh Extraction
//!
//! All geometry is generated by the [`fast-surface-nets`](https://github.com/bonsairobo/fast-surface-nets-rs) crate, which uses
//! a dense, padded chunk of voxels to estimate mesh vertex positions and normals.
//!
//! # Biplanar Texture Mapping (work in progress)
//!
//! Each voxel type can have a specific set of material textures. Rather than specifying texture UV coordinates as a mesh vertex
//! attribute, they are derived from the world-space fragment positions. Using [Biplanar
//! Mapping](https://www.iquilezles.org/www/articles/biplanar/biplanar.htm), texture UVs are chosen in the fragment shader.
//!
//! # Level of Detail
//!
//! Each [`RenderNeighborhood`](crate::feldspar_map::clipmap::RenderNeighborhood) gets one mesh. The map and renderer plugins
//! work together to assign levels of detail to the map's spatial partitions, generate the appropriate meshes, and even blend
//! adjacent levels of detail together to avoid seams.
//!
//! ## Continuous LOD (work in progress)
//!
//! To avoid the incredibly frustrating issue of multi-resolution mesh stitching, we sacrifice some GPU memory to blend between
//! vertices of adjacent levels of detail together in the vertex shader, based on the distance from the camera to the vertex.

mod config;
mod mesher;
mod plugin;

pub use config::*;
pub use mesher::*;
pub use plugin::*;
